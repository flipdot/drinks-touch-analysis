#!/usr/bin/env python3
# Loads drinks purchase statistics with according user database and plots it in a meaningful way.

import os
import requests
import psycopg2

import pandas as pd

from pathlib import Path
from bs4 import BeautifulSoup # TODO Fix version in requirements.txt
from sshtunnel import SSHTunnelForwarder

LDAP_SCRAPE_HOST = '192.168.3.231' # power-pi.fd ?
DRINKS_DATA_HOST = '192.168.3.231' # drinks.fd

SSH_PORT = 22
SSH_USERNAME = '' # Please see:
SSH_PASSWORD = '' # https://www.raspberrypi.org/documentation/linux/usage/users.md
SSH_REMOTE_BIND = ('127.0.0.1', 5432)
SSH_LOCAL_BIND = SSH_REMOTE_BIND

DATA_DIRECTORY = 'data'
CSV_SEPARATOR = ';'
LDAP_DATA_FILE = '{}/users.csv'.format(DATA_DIRECTORY)
DRINKS_DATA_FILE = '{}/drinks.csv'.format(DATA_DIRECTORY)
SCAN_DATA_FILE = '{}/scans.csv'.format(DATA_DIRECTORY)


def get_ldap_users(reload=False):
    # Load local data if it exists and reloading is disabled
    ldap_data_file = Path(LDAP_DATA_FILE)
    if not reload and ldap_data_file.is_file():
        # Pandas to the rescue!
        return pd.read_csv(LDAP_DATA_FILE, sep=CSV_SEPARATOR)

    # Request scraping content
    r = requests.get('http://{}/'.format(LDAP_SCRAPE_HOST))
    if r.status_code != 200:
        raise ConnectionError('Could not connect to LDAP scrape host ({})!'.format(LDAP_SCRAPE_HOST))
    if r.text == '':
        raise ConnectionError('Could not collect data from LDAP scrape host ({})!'.format(LDAP_SCRAPE_HOST))

    # Scrape
    soup = BeautifulSoup(r.text, 'html.parser')
    users = ['USER']
    uids = ['UID']
    for option in soup.find_all('option'):
        user = option.get_text().strip()
        uid = option.get('value').strip()
        # Skip erroneous/empty entries
        if not user or not uid or user == '' or uid == '':
            continue
        users.append(user)
        uids.append(uid)

    # Create data directory if necessary
    if not os.path.exists(DATA_DIRECTORY):
        os.makedirs(DATA_DIRECTORY)

    csv_data = pd.DataFrame({users[0]: users[1:], uids[0]: uids[1:]}).drop_duplicates()

    # Save data to disk
    csv_data.to_csv(LDAP_DATA_FILE, sep=CSV_SEPARATOR, index=False)
    return get_ldap_users()

def postgres_query(query):
    try:
        conn = psycopg2.connect("dbname='drinks' user='postgres' host='localhost'")
    except ConnectionError as e:
        raise ConnectionError("I am unable to connect to the database:\n{}".format(e))

    cur = conn.cursor()
    cur.execute(query)
    rows = cur.fetchall()
    return rows


def ssh_postgres_query(query):
    with SSHTunnelForwarder(
            (DRINKS_DATA_HOST, SSH_PORT),
            ssh_username=SSH_USERNAME,
            ssh_password=SSH_PASSWORD,
            remote_bind_address=SSH_REMOTE_BIND,
            local_bind_address=SSH_LOCAL_BIND,
    ):
        return postgres_query(query)


def get_drinks_data(reload=False):
    # Load local data if it exists and reloading is disabled
    drinks_data_file = Path(DRINKS_DATA_FILE)
    if not reload and drinks_data_file.is_file():
        # Pandas to the rescue!
        return pd.read_csv(DRINKS_DATA_FILE, sep=CSV_SEPARATOR)

    # See https://stackoverflow.com/q/43891181
    drinks_data_raw = pd.DataFrame(ssh_postgres_query("SELECT * FROM drink;"))
    drinks_data = pd.DataFrame({
        "EAN": drinks_data_raw[1],
        "NAME": drinks_data_raw[2],
        "SIZE": drinks_data_raw[3],
        "TYPE": drinks_data_raw[5],
    })

    return drinks_data


def get_scan_data(reload=False):
    # Load local data if it exists and reloading is disabled
    scan_data_file = Path(SCAN_DATA_FILE)
    if not reload and scan_data_file.is_file():
        # Pandas to the rescue!
        return pd.read_csv(SCAN_DATA_FILE, sep=CSV_SEPARATOR)

    # See https://stackoverflow.com/q/43891181
    scan_data_raw = pd.DataFrame(ssh_postgres_query("SELECT * FROM scanevent;"))
    scan_data = pd.DataFrame({
        "BARCODE": scan_data_raw[1],
        "USER_ID": scan_data_raw[2],
        "TIMESTAMP": scan_data_raw[3],
    })

    return scan_data


if __name__ == '__main__':
    users = get_ldap_users()
    drinks_data = get_drinks_data()
    scan_data = get_scan_data()

    # psycopg2 csv export query via python's ssh lib
